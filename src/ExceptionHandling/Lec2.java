package ExceptionHandling;

/*
    Overview of Predefined Exception:

    1. ArithmeticException
        java.lang.ArithmeticException
        In Java application, when we have situation like a number divided by zero there we will get ArithmeticException.

    2. NullPointerException
        java.lang.NullPointerException
        In Java applications, when we access any instance variable or instance method by using a reference variable
            contains null value there JVM will provide NullPointerException.

    3. ArrayIndexOutOfBoundsException / StringIndexOutOfBoundsException
        java.lang.ArrayIndexOutOfBoundsException /
            java.lang.StringIndexOutOfBoundsException
        When we add an element to an array / string at a particular index which is not in the range of the Array /
        String indexes or when we access an element at such indexes then JVM raises these exceptions.

    4. FileNotFoundException
        java.io.FileNotFoundException:
        In java applications, when we create FileInputStream with a particular Source file name which is not there in
        the specified location, then the JVM will raise an FileNotFoundException.

    5. ClassNotFoundException
        java.lang.ClassNotFoundException
        In Java applications, if we want to load a particular class bytecode without creating object then we have to use
        "Class.forName(---)" method from java.lang.Class class. Class.forName() method will take a particular class as
        parameter, Class.forName() will check whether the class exists or not, if the class does not exist then JVM will
        raise an Exception.
    6. InstantiationException / IllegalAccessException
        java.lang.InstantiationException / java.lang.IllegalAccessException
        After loading class bytecode to the memory by using Class.forName() if we want to create and object explicitly
        for the loaded class then we have to use newInstance() method from java.lang.Class. newInstance() will search
        for non-private and 0-arg constructor, where if the constructor is Parameterized then JVM will raise an
        exception like InstantiationException but if the constructor is private then the JVM will raise the
        IllegalAccessException.


    2. User Defined Exception
        These are the exception which are custom generated by the user to satisfy particular needs for the successful
        build of the Application.

        We use throw and throws keyword in order to achieve this.
 */
public class Lec2 {

}
